services:

  nginxlb:
    depends_on:
    - webapp 
    image: nginx:alpine
    volumes:
    - ./img_nginxlb/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
    - '8083:4000'
    networks:
    - frontnet

  webapp:
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    build: img_webapp
    command: flask run --host=0.0.0.0
    restart: always
    volumes:
    - $PWD/img_webapp/:/python-flask/
    environment:
      FLASK_APP: app
      FLASK_ENV: development
      REDIS_AUTH:               "${REDIS_AUTH}"
      MYSQL_DATABASE:           "${MYSQL_DATABASE}"
      MYSQL_USER:               "${MYSQL_USER}"
      MYSQL_PASSWORD:           "${MYSQL_PASSWORD}"
    networks:
    - frontnet
    - backnet

  mysql:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    volumes:
    - mysql_data:/var/lib/mysql
    restart: always
    ports:
    - 3306
    environment:
      MYSQL_ROOT_PASSWORD:      "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE:           "${MYSQL_DATABASE}" 
      MYSQL_USER:               "${MYSQL_USER}"
      MYSQL_PASSWORD:           "${MYSQL_PASSWORD}"
    networks:
    - backnet
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent"]
      interval: 3s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    command: "redis-server --requirepass ${REDIS_AUTH}"
    volumes:
    - $PWD/img_redis/redis-data:/var/lib/redis
    - $PWD/img_redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
    - REDIS_REPLICATION_MODE=master
    networks:
    - backnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      retries: 5
      start_period: 30s

volumes:
  mysql_data: {}

networks:
  backnet:
  frontnet:
